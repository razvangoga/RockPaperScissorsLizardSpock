@using Microsoft.AspNetCore.Http
@layout MainLayout
@page "/"

@inject IOptions<TwitterOptions> TwitterOptions
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

@inject IOptions<MultiplayerSettings> MultiplayerSettings

<div class="index-content">
    <div class="login">
        <div class="login-section">
            <div class="header-layout">
                <div class="header-layout-item"></div>
                <div class="header-layout-item header-layout-item--large"></div>
                <div class="header-layout-item">
                    <RPSLS.Web.Components.LeaderboardLink MultiplayerSettings="MultiplayerSettings.Value" />
                </div>
            </div>
            <form>
                <img class="logo" src="/assets/images/png/logo.png">
                <div class="subtitle-container">
                    <h2 class="subtitle">The geek version of rock-paper-scissors.</h2>
                    <h2 class="subtitle">Play with a friend or try to defeat our bot!</h2>
                    <p class="info-contest">
                        April 17th - May 15th, play to get to a chance to win awesome prizes.
                        <a href="/assets/pdfs/RPSLS_Rules.pdf" target="_blank">See Rules</a>
                        for more information.
                    </p>
                </div>

                @if (string.IsNullOrWhiteSpace(Username))
                {
                    <input @bind-value="@CustomUsername" @bind-value:event="oninput" class="user" type="text" placeholder="Type Username" required />

                    <div class="sign_twitter">
                        @if (!string.IsNullOrWhiteSpace(TwitterOptions?.Value?.ConsumerKey) && !string.IsNullOrWhiteSpace(TwitterOptions?.Value?.ConsumerSecret))
                        {
                            <span>or <a href="/api/account/login/twitter">Sign in with Twitter</a></span>
                        }
                    </div>
                }
                else
                {
                    <div class="subtitle-container">
                        <h2 class="subtitle" @onclick="Logout">HELLO, @Username.ToUpperInvariant()</h2>
                    </div>
                }

                <div class="custom-button-container">
                    <div class="custom-button @(UserNameIsEmpty? "custom-button-disabled" : "")">
                        <button type="button" @onclick="PlayAgainstBots" class="custom-button-link" disabled="@UserNameIsEmpty">Play with a bot</button>
                    </div>
                    @if (MultiplayerSettings.Value.Enabled)
                    {
                        <div class="custom-button @(UserNameIsEmpty? "custom-button-disabled" : "")">
                            <button type="button" @onclick="PlayAgainstHumans" class="custom-button-link" disabled="@UserNameIsEmpty">Play with a friend</button>
                        </div>
                    }
                </div>
            </form>
        </div>
    </div>

    <div class="github">
        <a class="github-text" target="_blank" href="https://github.com/microsoft/RockPaperScissorsLizardSpock">Get the code from GitHub</a>
    </div>
</div>

<CookiesBanner />

@code
{
    private string CustomUsername { get; set; }

    [Parameter]
    public string RedirectUrl { get; set; }

    public string Username { get; set; }
    public bool IsTwitterUser { get; set; }

    public bool UserNameIsEmpty => String.IsNullOrEmpty(Username) && String.IsNullOrEmpty(CustomUsername);

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Username = state.User?.Identity?.Name ?? string.Empty;
        IsTwitterUser = state.User.Identity.AuthenticationType == TwitterDefaults.AuthenticationScheme;
        if (!string.IsNullOrWhiteSpace(Username) && !string.IsNullOrWhiteSpace(RedirectUrl))
        {
            NavigationManager.NavigateTo(RedirectUrl);
        }
    }

    protected void PlayAgainstBots() => Play("/challenger");
    protected void PlayAgainstHumans() => Play("/lobby");

    private void Play(string redirect)
    {
        if (!string.IsNullOrWhiteSpace(CustomUsername))
            Username = CustomUsername;

        if (!string.IsNullOrWhiteSpace(Username))
        {
            var uri = redirect;
            if (!IsTwitterUser)
            {
                var encodedUsername = System.Web.HttpUtility.UrlEncode(Username);
                var encodedRedirect = System.Web.HttpUtility.UrlEncode(redirect);
                uri = $"/api/account/login?username={encodedUsername}&redirectUrl={encodedRedirect}";
            }

            NavigationManager.NavigateTo(uri, true);
        }
    }

    private void Logout()
    {
        if (!string.IsNullOrWhiteSpace(Username))
        {

        }

        NavigationManager.NavigateTo("/", true);
    }
}